# 应用全局变量
只有在一个请求内，从一个函数到另一个 函数共享数据，全局变量并不够好。因为这下线程环境下行不通。
Flask提供了一个特殊的对象来确保只有在活动的请求中有效，并且每个请求都返回不同的值。
如同它对request和session做的那样.

flask.g 
	在这上存储任何你想要存储的。例如一个数据库连接或者当前登入用户。
	从Flask0.10起，对象g存储在应用上下文中而不再是请求上下文中，这意味着即使在应用上下文中它也是可访问的而不是只能在请求上下文中。 

# 另外，在0.10中可以使用get()方法来获取一个属性或者如果这个属性没设置的话将得到None。这两种方法是没有区别的：
	user = getattr(flask.g,'user',None)
	user = flask.get.get('user',None)

现在也能在 g 对象上使用 in 运算符来确定它是否有某个属性，并且它将使用 yield 关键字来生成这样一个可迭代的包含所有keys的生成器。

flask.current_app
指向当前正在处理请求的应用。可以使用app_contextx()方法修改这个代理


